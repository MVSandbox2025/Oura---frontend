const express = require("express");
const session = require("express-session");
// const { getDb, connectToDb } = require('./db')
const cors = require("cors");
const mongoose = require("mongoose");
const MemoryStore = require('memorystore')(session);
const MongoStore = require('connect-mongo');
const OpenAI = require("openai");
const passport = require("passport");
const passportStrategy = require("./passport");
const authRoute = require("./auth");
const paymentRouter = require("./routes/paymentRoute");
const paymentSchema = require('./model/paymentInfoSchema');

const app = express();
app.use(cors());
app.use(express.json());
require("dotenv").config();
const SchemaTest = require("./model/SchemaTest");
const PORT = 8000;

const secretKey = process.env.OPENAI_API_KEY;
const openai = new OpenAI({
  apiKey: secretKey,
});


async function startServer() {
  try {
    await mongoose.connect(
      "mongodb+srv://powertherapyai:0321abcdef@therapyai.cc4s8zn.mongodb.net/?retryWrites=true&w=majority&appName=TherapyAI",
      {
        dbName: "Therapy",
      }
    );
    console.log("Connected to MongoDB");
    app.listen(PORT, () => {
      console.log("App listening on port " + PORT);
    });

    // const findUser = await SchemaTest.findOne({})
    // console.log(findUser)
  } catch (error) {
    console.error("Error connecting to MongoDB:", error);
  }
}

startServer();



app.use(
  session({
    name: "session",
    secret: "OuraSecret",
    resave: false,
    saveUninitialized: true,
    cookie : { httpOnly: false, maxAge : (4 * 60 * 60 * 1000)},
    store: MongoStore.create({mongoUrl: "mongodb+srv://powertherapyai:0321abcdef@therapyai.cc4s8zn.mongodb.net/?retryWrites=true&w=majority&appName=TherapyAI", collectionName: "mySession"}),
  })
);

app.use(passport.initialize());
app.use(passport.session());

app.use(
  cors({
    origin: "http://localhost:3000",
    methods: "GET,POST,PUT,DELETE",
    credentials: true,
  })
);

app.use("/auth", authRoute);
app.use("/api", paymentRouter);

async function checkWordsforCustomer(email) {
  try {

    const response = await fetch(
      `http://localhost:8000/api/paymentinfo?email=${email}`,
    );
    const data = await response.json();
    let words = data.user.words;
    return { words };
  } catch (error) {
    return error;
  }
}

async function updateStatustoFreemium(currentEmail) {
  try {
    const existingPayment = await paymentSchema.findOne({ email: currentEmail });
    let initialDate = new Date();
    initialDate.getMonth() + 1;
    //GET EXPIRY DATE FOR FREE TRIAL
    let expiredDate = new Date();
    expiredDate.setDate(expiredDate.getDate() + 30);
    expiredDate.getMonth() + 1;

    existingPayment.sessionID = '';
    existingPayment.customerID = '';
    existingPayment.subscriptionID = '';
    existingPayment.productName = 'Support';
    existingPayment.startDate = initialDate;
    existingPayment.expiryDate = expiredDate;
    existingPayment.words = 3000;
    existingPayment.status = "active";

    await existingPayment.save();
  } catch (error) {
    console.log("Error : ", error)
  }

}




app.post("/assistant", async (req, res) => {
  let expiredFlag = false;
  const currentDate = new Date();
  const existingPayment = await paymentSchema.findOne({ email: req.body.email });
  if (existingPayment) {
    let currentMillis = new Date(currentDate).getTime();
    let existingMillis = new Date(existingPayment.expiryDate).getTime();
    if (currentMillis > existingMillis) {
      console.log("True")
      await updateStatustoFreemium(req.body.email)
      expiredFlag = true;
    }
  }

  const input = req.body.input;
  //GET LAST INPUT FROM USER TO CHECK NUMBER OF WORDS
  let lastMessage;
  for (let i = input.length - 1; i >= 0; i--) {
    if (input[i].role == "user") {
      lastMessage = input[i].content;
      break;
    }
  }
  const { words } = await checkWordsforCustomer(req.body.email);
  // const currentDate = new Date();
  const inputCount = lastMessage.split(/\s+/);
  const numberOfWords = inputCount.length;
  const newTotalWords = words - numberOfWords;

  if (!expiredFlag) {
    
    existingPayment.words = newTotalWords; // Update the words field with the new value
    if (newTotalWords < 0) {
      existingPayment.status = "closed";
      await existingPayment.save();
      res.send({ message: "closed" })

    }
    await existingPayment.save();



  }
  const options = {
    method: "POST",
    headers: {
      Authorization: `Bearer ${secretKey}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      model: "gpt-3.5-turbo",
      messages: req.body.input,
      max_tokens: 400,
    }),
  };

  try {
    const response = await fetch(
      "https://api.openai.com/v1/chat/completions",
      options
    );
    const data = await response.json();
    res.send(data);
  } catch (error) {
    console.log("Error in GET Request" + error);
  }
});
